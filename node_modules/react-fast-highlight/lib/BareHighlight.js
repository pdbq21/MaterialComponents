'use strict';

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BareHighlight = function (_PureComponent) {
  _inherits(BareHighlight, _PureComponent);

  function BareHighlight() {
    var _temp, _this, _ret;

    _classCallCheck(this, BareHighlight);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = {
      highlightedCode: null,
      language: null
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  BareHighlight.prototype.componentDidMount = function componentDidMount() {
    this._highlightCode();
  };

  BareHighlight.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    // If the text changed make sure to reset the state
    // This way we ensure that the new text is immediately displayed.
    if (nextProps.children !== this.props.children) {
      this.setState({ highlightedCode: null, language: null });
    }
  };

  BareHighlight.prototype.componentDidUpdate = function componentDidUpdate() {
    this._highlightCode();
  };

  BareHighlight.prototype.getInitialCode = function getInitialCode() {
    var type = _typeof(this.props.children);
    if (type !== 'string') {
      throw new Error('Children of <Highlight> must be a string. \'' + type + '\' supplied');
    }

    return this.props.children;
  };

  BareHighlight.prototype.getHighlightPromise = function getHighlightPromise() {
    var _this2 = this;

    var _props = this.props,
        highlightjs = _props.highlightjs,
        languages = _props.languages;


    return new Promise(function (resolve) {
      if (languages && languages.length === 1) {
        resolve(highlightjs.highlight(languages[0], _this2.getInitialCode()));
      } else {
        resolve(highlightjs.highlightAuto(_this2.getInitialCode(), languages));
      }
    });
  };

  BareHighlight.prototype._highlightCode = function _highlightCode() {
    var _this3 = this;

    var _props2 = this.props,
        languages = _props2.languages,
        worker = _props2.worker;


    if (worker) {
      worker.onmessage = function (event) {
        return _this3.setState({
          highlightedCode: event.data.value,
          language: event.data.language
        });
      };
      worker.postMessage({ code: this.getInitialCode(), languages: languages });
    } else {
      this.getHighlightPromise().then(function (result) {
        return _this3.setState({ highlightedCode: result.value, language: result.language });
      });
    }
  };

  BareHighlight.prototype.render = function render() {
    var code = this.state.highlightedCode;
    var classes = (0, _classnames2.default)(this.props.className, 'hljs', this.state.language);

    if (code) {
      return _react2.default.createElement(
        'pre',
        null,
        _react2.default.createElement('code', { className: classes, dangerouslySetInnerHTML: { __html: code } })
      );
    }

    return _react2.default.createElement(
      'pre',
      null,
      _react2.default.createElement(
        'code',
        { className: classes },
        this.getInitialCode()
      )
    );
  };

  return BareHighlight;
}(_react.PureComponent);

BareHighlight.defaultProps = {
  className: '',
  languages: [],
  worker: null
};
exports.default = BareHighlight;


BareHighlight.propTypes = {
  children: _propTypes2.default.string.isRequired,
  className: _propTypes2.default.string,
  highlightjs: _propTypes2.default.object.isRequired, // eslint-disable-line react/forbid-prop-types
  languages: _propTypes2.default.arrayOf(_propTypes2.default.string),
  worker: _propTypes2.default.object };